// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String?
  email String @unique
  password String?
  post Post[]
  comment Comment[]
  like Like[]
  // status Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Post{
  id Int @id @default(autoincrement())
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int
  title String
  description String
  comment Comment[]
  like Like[]
  comment_count Int       @default(0)
  like_count Int       @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Comment{
  id String @id @default(uuid())
  post Post @relation(fields: [post_id], references: [id], onDelete:Cascade)
  post_id Int
  user User @relation(fields: [user_id],references: [id], onDelete: Cascade)
  user_id Int
  comment String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Like{
  id String @id @default(uuid())
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id Int
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int
  // like Boolean @default(false)
  like Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}